// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var events = events || {};

/**
 * @enum {number}
 */
events.Target = {
  Subscriber: 0,
  Publisher: 1
};

/**
 * @enum {string}
 */
events.TargetName = {
  0: 'Subscriber',
  1: 'Publisher'
};

/**
 * @enum {number}
 */
events.Type = {
  Offer: 0,
  Answer: 1,
  Signal: 2,
  Join: 3
};

/**
 * @enum {string}
 */
events.TypeName = {
  0: 'Offer',
  1: 'Answer',
  2: 'Signal',
  3: 'Join'
};

/**
 * @constructor
 */
events.Event = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {events.Event}
 */
events.Event.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {events.Event=} obj
 * @returns {events.Event}
 */
events.Event.getRootAsEvent = function(bb, obj) {
  return (obj || new events.Event).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {events.Type}
 */
events.Event.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {events.Type} */ (this.bb.readInt8(this.bb_pos + offset)) : events.Type.Offer;
};

/**
 * @returns {events.Target}
 */
events.Event.prototype.target = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {events.Target} */ (this.bb.readInt8(this.bb_pos + offset)) : events.Target.Subscriber;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
events.Event.prototype.payload = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
events.Event.prototype.uid = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
events.Event.prototype.room = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
events.Event.startEvent = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {events.Type} type
 */
events.Event.addType = function(builder, type) {
  builder.addFieldInt8(0, type, events.Type.Offer);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {events.Target} target
 */
events.Event.addTarget = function(builder, target) {
  builder.addFieldInt8(1, target, events.Target.Subscriber);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} payloadOffset
 */
events.Event.addPayload = function(builder, payloadOffset) {
  builder.addFieldOffset(2, payloadOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} uidOffset
 */
events.Event.addUid = function(builder, uidOffset) {
  builder.addFieldOffset(3, uidOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} roomOffset
 */
events.Event.addRoom = function(builder, roomOffset) {
  builder.addFieldOffset(4, roomOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
events.Event.endEvent = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
events.Event.finishEventBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {events.Type} type
 * @param {events.Target} target
 * @param {flatbuffers.Offset} payloadOffset
 * @param {flatbuffers.Offset} uidOffset
 * @param {flatbuffers.Offset} roomOffset
 * @returns {flatbuffers.Offset}
 */
events.Event.createEvent = function(builder, type, target, payloadOffset, uidOffset, roomOffset) {
  events.Event.startEvent(builder);
  events.Event.addType(builder, type);
  events.Event.addTarget(builder, target);
  events.Event.addPayload(builder, payloadOffset);
  events.Event.addUid(builder, uidOffset);
  events.Event.addRoom(builder, roomOffset);
  return events.Event.endEvent(builder);
}

// Exports for Node.js and RequireJS
this.events = events;
