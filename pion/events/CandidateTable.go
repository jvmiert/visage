// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package events

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CandidateTable struct {
	_tab flatbuffers.Table
}

func GetRootAsCandidateTable(buf []byte, offset flatbuffers.UOffsetT) *CandidateTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CandidateTable{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CandidateTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CandidateTable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CandidateTable) Candidate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CandidateTable) SdpMid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CandidateTable) SdpmLineIndex() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CandidateTable) MutateSdpmLineIndex(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *CandidateTable) UsernameFragment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CandidateTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CandidateTableAddCandidate(builder *flatbuffers.Builder, candidate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(candidate), 0)
}
func CandidateTableAddSdpMid(builder *flatbuffers.Builder, sdpMid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(sdpMid), 0)
}
func CandidateTableAddSdpmLineIndex(builder *flatbuffers.Builder, sdpmLineIndex uint16) {
	builder.PrependUint16Slot(2, sdpmLineIndex, 0)
}
func CandidateTableAddUsernameFragment(builder *flatbuffers.Builder, usernameFragment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(usernameFragment), 0)
}
func CandidateTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
