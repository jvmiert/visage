"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.CandidateTable = void 0;
var flatbuffers = require("flatbuffers");
var CandidateTable = /** @class */ (function () {
    function CandidateTable() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CandidateTable.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CandidateTable.getRootAsCandidateTable = function (bb, obj) {
        return (obj || new CandidateTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CandidateTable.getSizePrefixedRootAsCandidateTable = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CandidateTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CandidateTable.prototype.candidate = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    CandidateTable.prototype.sdpMid = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    CandidateTable.prototype.sdpmLineIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    };
    CandidateTable.prototype.usernameFragment = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    CandidateTable.startCandidateTable = function (builder) {
        builder.startObject(4);
    };
    CandidateTable.addCandidate = function (builder, candidateOffset) {
        builder.addFieldOffset(0, candidateOffset, 0);
    };
    CandidateTable.addSdpMid = function (builder, sdpMidOffset) {
        builder.addFieldOffset(1, sdpMidOffset, 0);
    };
    CandidateTable.addSdpmLineIndex = function (builder, sdpmLineIndex) {
        builder.addFieldInt16(2, sdpmLineIndex, 0);
    };
    CandidateTable.addUsernameFragment = function (builder, usernameFragmentOffset) {
        builder.addFieldOffset(3, usernameFragmentOffset, 0);
    };
    CandidateTable.endCandidateTable = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CandidateTable.createCandidateTable = function (builder, candidateOffset, sdpMidOffset, sdpmLineIndex, usernameFragmentOffset) {
        CandidateTable.startCandidateTable(builder);
        CandidateTable.addCandidate(builder, candidateOffset);
        CandidateTable.addSdpMid(builder, sdpMidOffset);
        CandidateTable.addSdpmLineIndex(builder, sdpmLineIndex);
        CandidateTable.addUsernameFragment(builder, usernameFragmentOffset);
        return CandidateTable.endCandidateTable(builder);
    };
    return CandidateTable;
}());
exports.CandidateTable = CandidateTable;
