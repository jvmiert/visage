"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.LatencyPayload = void 0;
var flatbuffers = require("flatbuffers");
var LatencyPayload = /** @class */ (function () {
    function LatencyPayload() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LatencyPayload.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LatencyPayload.getRootAsLatencyPayload = function (bb, obj) {
        return (obj || new LatencyPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LatencyPayload.getSizePrefixedRootAsLatencyPayload = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LatencyPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LatencyPayload.prototype.timestamp = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    };
    LatencyPayload.prototype.id = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    };
    LatencyPayload.startLatencyPayload = function (builder) {
        builder.startObject(2);
    };
    LatencyPayload.addTimestamp = function (builder, timestamp) {
        builder.addFieldFloat64(0, timestamp, 0.0);
    };
    LatencyPayload.addId = function (builder, id) {
        builder.addFieldInt16(1, id, 0);
    };
    LatencyPayload.endLatencyPayload = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LatencyPayload.createLatencyPayload = function (builder, timestamp, id) {
        LatencyPayload.startLatencyPayload(builder);
        LatencyPayload.addTimestamp(builder, timestamp);
        LatencyPayload.addId(builder, id);
        return LatencyPayload.endLatencyPayload(builder);
    };
    return LatencyPayload;
}());
exports.LatencyPayload = LatencyPayload;
